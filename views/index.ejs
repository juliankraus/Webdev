<html>
<head>
  <title>Hausarbeit</title>
  <link rel="stylesheet" href="style.min.css" />
  <link rel="stylesheet" href="style.css" />
  <script type="text/javascript">
      var map;

      // set up the map
      function initMap() {
          map = new google.maps.Map(document.getElementById('map'), {
              center: new google.maps.LatLng(49.749992, 6.6371433),
              zoom: 13,
              mapTypeId: google.maps.MapTypeId.ROADMAP
          });
      }

      // pass geojson here
      function loadGeoJsonString(geoString) {
          var geojson = JSON.parse(geoString);
          map.data.addGeoJson(geojson);
          zoom(map);
      }

      // zoom
      function zoom(map) {
          var bounds = new google.maps.LatLngBounds();
          map.data.forEach(function(feature) {
              processPoints(feature.getGeometry(), bounds.extend, bounds);
          });
          map.fitBounds(bounds);
      }

      // draw routes
      function processPoints(geometry, callback, thisArg) {
          if (geometry instanceof google.maps.LatLng) {
              callback.call(thisArg, geometry);
          } else if (geometry instanceof google.maps.Data.Point) {
              callback.call(thisArg, geometry.get());
          } else {
              geometry.getArray().forEach(function(g) {
                  processPoints(g, callback, thisArg);
              });
          }
      }

      // GOOOOOOOOO!!1!!11
      function initialize() {
          initMap();
      };
  </script>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCFDRNsKcoDdX1az69E7DThJYvzsAekkq0&callback=initialize"
          async defer></script>
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  <script type="text/javascript">
      google.charts.load('current', {'packages':['corechart']});
      google.charts.setOnLoadCallback(drawChart);

      function drawChart(rows) {
          var data = new google.visualization.DataTable();
          data.addColumn('number', 'X');
          data.addColumn('number', 'elevation');
          data.addRows(rows);

          var options = {
              legend: "none",
              backgroundColor: "transparent",
              chartArea: {width:"100%",height:"100%"},
              vAxis: {gridlines: {count: 0}, baselineColor: "transparent"},
              hAxis: {gridlines: {count: 0}, baselineColor: "transparent"},
              colors: ["black"]
          }

          var chart = new google.visualization.AreaChart(document.getElementById('elevation'));
          chart.draw(data, options);
      }
  </script>
  <script src="main.js" ></script>
  <script src="main.min.js" ></script>
</head>
<body>
<div id="map"></div>
<div id="elevation"></div>

<div id="bar">
  <div class="paginates">
    <button class="paginate left"> < </button>
    <button class="paginate right"> > </button>
  </div>
  <div class="counter"></div>
</div>

<ul id="list"></ul>
<script>

    // some fancy variables
    var maxListElements = 25;
    var json = <%- JSON.stringify(data)%>;
    var index = 0;
    var total = Math.round(json.length / maxListElements);
    var counter = 0;
    var elevation = [];

    // document elements
    var list = document.getElementById("list");
    var pl = document.querySelector(".paginate.left");
    var pr = document.querySelector(".paginate.right");

    // Buttons on click
    pl.onclick = slide.bind(this, -1);
    pr.onclick = slide.bind(this, 1);

    // function to switch between pages
    function slide(offset) {
        index = Math.min(Math.max(index + offset, 0), total - 1);

        // display counter text
        document.querySelector(".counter").innerHTML = (index + 1) + "/" + total;

        // ultra nice
        createListItems(list, (maxListElements * (index + 1)), maxListElements * index);

        pr.setAttribute("data-state", index === 0 ? "disabled" : "");
        pl.setAttribute("data-state", index === total - 1 ? "disabled" : "");
    }

    slide(0);

    (function () {

        // init first page (counter)
        createListItems(list, maxListElements, 0);

        // listener for click events in list
        list.addEventListener("click", function (e) {
            json.forEach(function (data) {
                if(data.features[0].properties.name === e.target.textContent) {
                    initialize();
                    loadGeoJsonString(JSON.stringify(data));

                    // get elevation coordinates from clicked object (x and y coordinates)
                    data.features[0].geometry.coordinates.forEach(function (coordinates) {
                        elevation[counter] = [counter, coordinates[2]];
                        counter++;
                    });

                    // draw chart
                    drawChart(elevation);
                };
            });
        });
    })();

    function createListItems(list, count, index) {
        while (list.hasChildNodes()) {
            list.removeChild(list.firstChild);
        }

        for (var itemIndex = index; itemIndex < count; itemIndex++) {
            var listItem = document.createElement("li");
            listItem.textContent = json[itemIndex].features[0].properties.name;

            if ((itemIndex + 1) % 2 === 0) {
                listItem.style.background = "white";
            }
            else {
                listItem.style.background = "lightgrey";
            }
            listItem.style.cursor = "pointer";

            list.appendChild(listItem);
        }
    }
</script>
</body>
</html>

